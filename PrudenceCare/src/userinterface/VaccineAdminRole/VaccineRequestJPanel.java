/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VaccineAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.VaccineEnterprise;
import Business.Organization.Organization;
import Business.Organization.VaccineCompanyOrganization;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import Business.Vaccine.Vaccine;
import Business.Vaccine.VaccineTester;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.VaccineWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import userinterface.VaccineScientistRole.ViewVaccineJPanel;

/**
 *
 * @author rishabagarwal
 */
public class VaccineRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem business; 
    private Enterprise enterprise;
    private Organization organization;
    private int testerNum;
    private VaccineWorkRequest vaccineReq = null;
    public VaccineRequestJPanel(JPanel userProcessContainer, UserAccount account,Organization organization,Enterprise enterprise,EcoSystem business ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.enterprise = enterprise;
        this.organization = organization;
        this.account= account;
        this.testerNum = 0;
        this.setSize(1466, 902);
        jTabbedPane1.setSize(1000, 700);
                        introPanel.setBounds(171, 33, 1293, 101);
        jLabel7.setBounds(1, 1, 160, 113);
        jTabbedPane1.setBounds(1, 130, 1228, 782);
        jPanel2.setSize(1190,600);
        jPanel5.setSize(1190,600);

        lblVaccineReq.setText("");
        populateStaffBox();
        populateDrugRequestTable();
         populateLabTestTable();
                 DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(java.awt.Color.BLACK);
         headerRenderer.setForeground(java.awt.Color.WHITE);
         

        for (int i = 0; i < vaccineRequestTable.getModel().getColumnCount(); i++) {
            vaccineRequestTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        vaccineRequestTable.setShowGrid(true);
       vaccineRequestTable.getTableHeader().setFont(new Font("SansSerif 14 Plain",Font.BOLD,16));

        for (int i = 0; i < testorsTable.getModel().getColumnCount(); i++) {
            testorsTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        testorsTable.setShowGrid(true);
       testorsTable.getTableHeader().setFont(new Font("SansSerif 14 Plain",Font.BOLD,16));

        for (int i = 0; i < testRequestTable.getModel().getColumnCount(); i++) {
            testRequestTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        testRequestTable.setShowGrid(true);
       testRequestTable.getTableHeader().setFont(new Font("SansSerif 14 Plain",Font.BOLD,16));
       jTabbedPane1.setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      public void populateDrugRequestTable(){
             DefaultTableModel model = (DefaultTableModel)vaccineRequestTable.getModel();
        model.setRowCount(0);
        List<VaccineWorkRequest> requestList = account.getVaccineWorkQueue().getVaccineRequestList();
        for(VaccineWorkRequest req: requestList){
                    Map<String,Date> map = req.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : req.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            if(latestKey.equals("Pending Approval") || latestKey.equals("Selecting Vaccine Testers") ){
            Object row[] = new Object[8];
                 row[0] = req;
                 row[1] = req.getVaccine().getName();
                 row[2] = req.getVaccine().getCondition();
                 row[3] = req.getRequestDate();
            
            if(req.getSender() == null){
                 row[4] = "";
            }else{
                 row[4] = req.getSender();
            }

   
                 row[5] = latestKey;
            

            
            model.addRow(row); 
            }
        }
    }
   public void populateTesterTable(){
                DefaultTableModel model = (DefaultTableModel)testorsTable.getModel();
        model.setRowCount(0);
       VaccineEnterprise vacEnterprise = (VaccineEnterprise)enterprise;
        List<VaccineTester> vaccinetestList = vacEnterprise.getVaccinetesterDirectory().getVaccineTesterList();
        for(VaccineTester tester: vaccinetestList){
            Object row[] = new Object[4];
                 row[0] = tester;
                 row[1] = tester.getName();
                 row[2] = tester.getCondition();
                 row[3] = tester.getAge();        
                 
            model.addRow(row);                    
        }
            
    
    }
    public void populateLabTestTable(){
                       DefaultTableModel model = (DefaultTableModel)testRequestTable.getModel();
        model.setRowCount(0);

        for(LabTestWorkRequest labTest: account.getLabTestWorkQueue().getLabRequestList()){
                            Map<String,Date> map = labTest.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : labTest.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            if(latestKey.equals("LabTest Created")){
            Object row[] = new Object[8];
                 row[0] = labTest;
                 row[1] = labTest.getLabTestType();
                 row[2] = labTest.getVaccine();
                 row[3] =labTest.getTester();
                 if(labTest.getReceiver() == null){
                     row[4] = "";
                 }else{
                 row[4] = labTest.getReceiver();
                 }
                 if(labTest.getResult() == null){
                     row[5] = "";
                 }else{
                 row[5] = labTest.getResult();
                 }
                 

                 
                 
            model.addRow(row);                    
        }
        }
    }
    public void populateStaffBox(){
        staffComboBox.removeAllItems();
        staffComboBox.addItem("");
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                if(ua.getRole().toString().equals("VaccineTestingStaff")){
                staffComboBox.addItem(ua);
                }
            }
        }
    }
    
  
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        vaccineRequestTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnSelectTester = new javax.swing.JButton();
        testerSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        routeMessage = new javax.swing.JTextField();
        btnRouteBack = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        staffComboBox = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        testRequestTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnDeselect = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        testorsTable = new javax.swing.JTable();
        btnStaffAsgn = new javax.swing.JButton();
        activeSelectionPanel = new javax.swing.JPanel();
        lblTesterNum = new javax.swing.JLabel();
        lblVaccineReq = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        introPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblEnterprise = new javax.swing.JLabel();
        lblAccount = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/selectPatient.png"))); // NOI18N

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        vaccineRequestTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        vaccineRequestTable.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        vaccineRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "VaccineID", "Name", "Type", "CreateDate", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(vaccineRequestTable);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 51));
        jLabel14.setText("Vaccine Requests to be sent for Clinical Trial:");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 51));
        jLabel15.setText("Process Vaccine Request");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 51));
        jLabel13.setText("Select from the table,the vaccine request to be sent for Clinical Trial");

        btnSelectTester.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSelectTester.setForeground(new java.awt.Color(0, 0, 51));
        btnSelectTester.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/proceedReq.png"))); // NOI18N
        btnSelectTester.setText("Proceed For Testers Selection");
        btnSelectTester.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));
        btnSelectTester.setBorderPainted(false);
        btnSelectTester.setContentAreaFilled(false);
        btnSelectTester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectTesterActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 51));
        jLabel3.setText("Number of Patients to be Tested");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(testerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel13))
                        .addContainerGap(152, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addComponent(btnSelectTester, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(173, 173, 173))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(191, 191, 191))))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(testerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSelectTester, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(71, 71, 71)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1069, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Vaccine Requests Table", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1166, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("View Vaccine", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Provide detailed reason for closure of the Drug Project:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 51));
        jLabel10.setText("Route Back Vaccine to Scientist");

        btnRouteBack.setBackground(new java.awt.Color(255, 255, 255));
        btnRouteBack.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnRouteBack.setForeground(new java.awt.Color(102, 0, 0));
        btnRouteBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/routeBack.png"))); // NOI18N
        btnRouteBack.setText("Route Back Request");
        btnRouteBack.setBorder(null);
        btnRouteBack.setBorderPainted(false);
        btnRouteBack.setContentAreaFilled(false);
        btnRouteBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouteBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(routeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(299, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(445, 445, 445)
                .addComponent(jLabel10)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRouteBack, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(351, 351, 351))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jLabel10)
                .addGap(78, 78, 78)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(routeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(btnRouteBack, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Route Back", jPanel3);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1166, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("View Tester Profile", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        staffComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffComboBoxActionPerformed(evt);
            }
        });

        testRequestTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        testRequestTable.setFont(new java.awt.Font("Sukhumvit Set", 1, 14)); // NOI18N
        testRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "Type", "VaccineID", "TesterID", "TestingStaff", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(testRequestTable);

        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 51));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/proceedReq.png"))); // NOI18N
        jButton4.setText("Proceed with Testing");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 51));
        jLabel19.setText("Select Vaccine Testing Staff for Clinical Trial:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel19)
                .addGap(31, 31, 31)
                .addComponent(staffComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(105, 105, 105)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vaccine Testing Staff Assignment", jPanel6);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        btnDeselect.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnDeselect.setForeground(new java.awt.Color(0, 0, 51));
        btnDeselect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/clear.png"))); // NOI18N
        btnDeselect.setText("Deselect All");
        btnDeselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectActionPerformed(evt);
            }
        });

        testorsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        testorsTable.setFont(new java.awt.Font("Sukhumvit Set", 1, 14)); // NOI18N
        testorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "TesterID", "Name", "Health Type", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(testorsTable);

        btnStaffAsgn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnStaffAsgn.setForeground(new java.awt.Color(0, 0, 51));
        btnStaffAsgn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/proceedReq.png"))); // NOI18N
        btnStaffAsgn.setText("Proceed For Staff Assignment");
        btnStaffAsgn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));
        btnStaffAsgn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStaffAsgnActionPerformed(evt);
            }
        });

        activeSelectionPanel.setBackground(new java.awt.Color(204, 255, 255));
        activeSelectionPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblTesterNum.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTesterNum.setForeground(new java.awt.Color(0, 0, 51));
        lblTesterNum.setText("Number of Testers: ");

        lblVaccineReq.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblVaccineReq.setText("VaccineReq");

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 51));
        jLabel17.setText("Choose Testers for recently proceeded Vaccine Request:");

        javax.swing.GroupLayout activeSelectionPanelLayout = new javax.swing.GroupLayout(activeSelectionPanel);
        activeSelectionPanel.setLayout(activeSelectionPanelLayout);
        activeSelectionPanelLayout.setHorizontalGroup(
            activeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(activeSelectionPanelLayout.createSequentialGroup()
                .addGroup(activeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(activeSelectionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(lblVaccineReq, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(activeSelectionPanelLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(lblTesterNum)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        activeSelectionPanelLayout.setVerticalGroup(
            activeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, activeSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(activeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVaccineReq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTesterNum, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(activeSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStaffAsgn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeselect, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 31, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnStaffAsgn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeselect))
                    .addComponent(activeSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clinical Trial Tester Selection", jPanel4);

        introPanel.setBackground(new java.awt.Color(0, 51, 153));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Clinical Trials Testers Selection");

        lblEnterprise.setBackground(new java.awt.Color(51, 51, 51));
        lblEnterprise.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblEnterprise.setForeground(new java.awt.Color(255, 255, 255));
        lblEnterprise.setText("Enterprise:");
        lblEnterprise.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lblAccount.setBackground(new java.awt.Color(51, 51, 51));
        lblAccount.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblAccount.setForeground(new java.awt.Color(255, 255, 255));
        lblAccount.setText("Enterprise:");
        lblAccount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        backJButton.setBackground(new java.awt.Color(0, 0, 102));
        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/home2.png"))); // NOI18N
        backJButton.setText("Home");
        backJButton.setBorder(null);
        backJButton.setBorderPainted(false);
        backJButton.setContentAreaFilled(false);
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout introPanelLayout = new javax.swing.GroupLayout(introPanel);
        introPanel.setLayout(introPanelLayout);
        introPanelLayout.setHorizontalGroup(
            introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(introPanelLayout.createSequentialGroup()
                .addGroup(introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(introPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(introPanelLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 207, Short.MAX_VALUE)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );
        introPanelLayout.setVerticalGroup(
            introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(introPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(introPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEnterprise, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAccount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(introPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(introPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        if(this.jTabbedPane1.getSelectedIndex() == 0){//all vaccine drugs to be tested
            populateDrugRequestTable();
        }else if(this.jTabbedPane1.getSelectedIndex() == 1){//view each vaccine details
                if(jPanel2.getComponentCount() > 0){
    jPanel2.remove(0);
    }
            int selectedRow = vaccineRequestTable.getSelectedRow();
            if(selectedRow<0){
                JOptionPane.showMessageDialog(null, "Please select a Vaccine row from Vaccine Request Table!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            VaccineWorkRequest vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedRow, 0);

            ViewVaccineJPanel viewVaccineJPanel=new ViewVaccineJPanel(jPanel2,account,business,vaccineReq.getVaccine(),false,true);
            jPanel2.add(viewVaccineJPanel);

        }else if(this.jTabbedPane1.getSelectedIndex() == 2){//remove vaccine request
            int selectedRow = vaccineRequestTable.getSelectedRow();
            if(selectedRow<0){
                JOptionPane.showMessageDialog(null, "Please select a Vaccine row from Vaccine Request Table!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }else if(this.jTabbedPane1.getSelectedIndex() == 3){//Tester Selection
    
            if(lblVaccineReq.getText().equals("")){
                JOptionPane.showMessageDialog(null, "No Vaccine Request Proceeded at the moment!", "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
                activeSelectionPanel.setVisible(true);
            }
            populateTesterTable();
        }else if(this.jTabbedPane1.getSelectedIndex() == 4){//View Tester
               if(jPanel5.getComponentCount() > 0){
    jPanel5.remove(0);
    }
            int selectedRow = testorsTable.getSelectedRow();
            if(selectedRow<0 ){
                JOptionPane.showMessageDialog(null, "Please select one Tester to view details!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            VaccineTester tester= (VaccineTester)testorsTable.getValueAt(selectedRow, 0);
            ViewTestersJPanel viewTestersJPanel = new ViewTestersJPanel(userProcessContainer, business,enterprise,tester,false,true);
            jPanel5.add(viewTestersJPanel);
        }else if(this.jTabbedPane1.getSelectedIndex() == 5){//vaccine testing Staff
            populateLabTestTable();
            populateDrugRequestTable();
            populateStaffBox();

        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        if(staffComboBox.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine Testing staff!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(vaccineReq == null){
            Vaccine vaccine = null;
            for(LabTestWorkRequest labReq: account.getLabTestWorkQueue().getLabRequestList()){
                vaccine = labReq.getVaccine();
            }
            for(VaccineWorkRequest work : account.getVaccineWorkQueue().getVaccineRequestList()){
                if(work.getVaccine().equals(vaccine)){
                    vaccineReq = work;
                }
            }
        }
        for(LabTestWorkRequest labReq: account.getLabTestWorkQueue().getLabRequestList()){
            Map<String,Date> map = labReq.getStatusMap();
            String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : labReq.getStatusMap().entrySet()) {
                if(latestKey.equals("")){
                    latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
            }
            if(latestKey.equals("LabTest Created")){
                if(labReq.getVaccine().getId().equals(vaccineReq.getVaccine().getId())){
                    labReq.setReceiver((UserAccount)staffComboBox.getSelectedItem());
                    labReq.setResult("Testing InProgress");
                    for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if(org.getName().equals("Vaccine Organization")){
                            organization = org;
                        }
                    }

                    for(UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()){
                        if(ua.getUsername().equals(staffComboBox.getSelectedItem().toString())){
                            ua.getLabTestWorkQueue().addLabRequest(labReq);
                        }
                    }

                }
            }
            business.getLabQueue().updateLabRequest(labReq, business.getLabQueue().getLabRequestList());
        }
        account.getLabTestWorkQueue().getLabRequestList().clear();

        Map<String,Date> statusMap = vaccineReq.getStatusMap();
        statusMap.put("Testing InProgress",new Date());
        vaccineReq.setStatusMap(statusMap);
        vaccineReq.setPhase("test");
        account.getVaccineWorkQueue().removeWorkRequest(vaccineReq);
        business.getVaccineQueue().updateWorkRequest(vaccineReq, business.getVaccineQueue().getVaccineRequestList());
        populateDrugRequestTable();
        populateLabTestTable();
        JOptionPane.showMessageDialog(null, "Clinical Trial Sent for Vaccine Staff Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void staffComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_staffComboBoxActionPerformed

    private void btnStaffAsgnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStaffAsgnActionPerformed
        // TODO add your handling code here:

        if(lblVaccineReq.getText().equals("")){
            JOptionPane.showMessageDialog(null, "No Vaccine Request Proceeded at the moment!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int rows = testorsTable.getSelectedRowCount();
        if(rows < testerNum){
            JOptionPane.showMessageDialog(null, "Required "+testerNum+" testers!\nThe selected testers are less than required testers!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(rows > testerNum){
            JOptionPane.showMessageDialog(null, "Required "+testerNum+" testers!\nThe selected testers are more than required testers!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int[] selectedRow = testorsTable.getSelectedRows();
        for(int i=0;i<selectedRow.length;i++){
            LabTestWorkRequest labReq = new LabTestWorkRequest();
            labReq.setMessage("");
            VaccineTester vacTester= (VaccineTester)testorsTable.getValueAt(selectedRow[i], 0);
            labReq.setTester(vacTester);
            labReq.setSender(account);
            Map<String,Date> labMap = labReq.getStatusMap();
            labMap.put("LabTest Created", new Date());
            labReq.setStatusMap(labMap);
            labReq.setComplete(false);
            labReq.setVaccine(vaccineReq.getVaccine());
            labReq.setLabTestType("Vaccine Test");
            account.getLabTestWorkQueue().addLabRequest(labReq);
            Map<String,Date> reqMap = vaccineReq.getStatusMap();
            reqMap.put("Assigning Testing Staff", new Date());
            vaccineReq.setStatusMap(reqMap);
            vaccineReq.setPhase("test");
            business.getVaccineQueue().updateWorkRequest(vaccineReq, business.getVaccineQueue().getVaccineRequestList());

            business.getLabQueue().addLabRequest(labReq);

        }
        vaccineReq.getVaccine().setTesterNum(testerNum);
        populateLabTestTable();
        populateDrugRequestTable();
        lblVaccineReq.setText("");
        lblTesterNum.setText("");
        JOptionPane.showMessageDialog(null, "Clinical Trial lab tests created successfully!\n Proceed for Vaccine Testing Staff Assignment!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnStaffAsgnActionPerformed

    private void btnDeselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectActionPerformed
        // TODO add your handling code here:

        testorsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnDeselectActionPerformed

    private void btnRouteBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouteBackActionPerformed
        // TODO add your handling code here:
        int row = vaccineRequestTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(routeMessage.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Route message is mandatory for sending back the request!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        VaccineWorkRequest vacReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(row, 0);
        Map<String,Date> reqMap = vacReq.getStatusMap();
        reqMap.put("Reroute from Admin", new Date());
        vacReq.setStatusMap(reqMap);
        business.getVaccineQueue().updateWorkRequest(vacReq, business.getVaccineQueue().getVaccineRequestList());
        UserAccount ua = vacReq.getSender();
        vacReq.setSender(account);
        vacReq.setReceiver(ua);
        vacReq.setResolveDate(new Date());
        vacReq.setSuccess("drop");
        ua.getVaccineWorkQueue().addWorkRequest(vacReq);
        account.getVaccineWorkQueue().removeWorkRequest(vacReq);
        business.getVaccineQueue().updateWorkRequest(vacReq, business.getVaccineQueue().getVaccineRequestList());
        JOptionPane.showMessageDialog(null, "Vaccine request has been routed back to the scientist!", "Warning", JOptionPane.WARNING_MESSAGE);
        populateDrugRequestTable();
        routeMessage.setText("");
    }//GEN-LAST:event_btnRouteBackActionPerformed

    private void btnSelectTesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTesterActionPerformed
        // TODO add your handling code here:
        boolean activeSelection = false;
  List<VaccineWorkRequest> requestList = account.getVaccineWorkQueue().getVaccineRequestList();
        for(VaccineWorkRequest req: requestList){
                    Map<String,Date> map = req.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : req.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            if(latestKey.equals("Selecting Vaccine Testers") ){
                activeSelection = true;
            }
        }
                
        if(activeSelection == true){        
   JOptionPane.showMessageDialog(null, "There is a Vaccine Request already for Selecting Testers!\nPlease select the testers and process the active request.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;                                 
            }       
        int rows = testRequestTable.getRowCount();
        if(rows > 0){
            JOptionPane.showMessageDialog(null, "There is a Vaccine Request already waiting to be sent for testing!\nPlease assign and process the active lab request.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int selectedRow = vaccineRequestTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedRow, 0);
        Map<String,Date> reqMap = vaccineReq.getStatusMap();
        reqMap.put("Selecting Vaccine Testers", new Date());
        vaccineReq.setStatusMap(reqMap);
        vaccineReq.setPhase("test");
        business.getVaccineQueue().updateWorkRequest(vaccineReq, business.getVaccineQueue().getVaccineRequestList());
        testerNum = (Integer)testerSpinner.getValue();
        if(testerNum <=0){
            JOptionPane.showMessageDialog(null, "Number of testers needs to be more than zero!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        populateTesterTable();
        populateDrugRequestTable();
        JOptionPane.showMessageDialog(null, "Vaccine Request Proceeded for Clinical Trial Testing!\nPlease select Clinical Trial Testers now!", "Warning", JOptionPane.WARNING_MESSAGE);
        lblVaccineReq.setText(vaccineReq.toString());
        lblTesterNum.setText("Number of Testers = "+testerNum);

    }//GEN-LAST:event_btnSelectTesterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activeSelectionPanel;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnDeselect;
    private javax.swing.JButton btnRouteBack;
    private javax.swing.JButton btnSelectTester;
    private javax.swing.JButton btnStaffAsgn;
    private javax.swing.JPanel introPanel;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAccount;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblTesterNum;
    private javax.swing.JLabel lblVaccineReq;
    private javax.swing.JTextField routeMessage;
    private javax.swing.JComboBox staffComboBox;
    private javax.swing.JTable testRequestTable;
    private javax.swing.JSpinner testerSpinner;
    private javax.swing.JTable testorsTable;
    private javax.swing.JTable vaccineRequestTable;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PharmacyAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LabEnterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Essentials.Medicine;
import Business.Organization.PharmacyOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabPatientWorkRequest;
import Business.WorkQueue.PharmaWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
//import javafx.scene.chart.CategoryAxis;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Manasa
 */
public class PharmaReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmaReportJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem business;
    PharmacyOrganization organization;
    UserAccount account;
    public PharmaReportJPanel(JPanel userProcessContainer, UserAccount account,Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.business = business;
        this.organization = organization;
        this.account=account;
        populateCovidCases(); //covid medicine number of requests - each req display
        populateAgeGroup();//age group pie chart
        populateMedicineGraph();//medicine number of buyers
        populateNewMedList();//newly approved
        populateConditionDemand(); //condition pie chart
        populateConditionMedDemands(); //For each condtion medicine more of demand
                this.setSize(1466, 902);
                introPanel.setBounds(171, 33, 1293, 101);
        jLabel7.setBounds(1, 1, 160, 113);
        jTabbedPane1.setBounds(1, 115, 1228, 782);
                lblEnterprise.setText(enterprise.getName());
        lblAccount.setText("Logged in as: "+account.getUsername());
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(java.awt.Color.BLACK);
         headerRenderer.setForeground(java.awt.Color.WHITE);

        for (int i = 0; i < covidTable.getModel().getColumnCount(); i++) {
            covidTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        covidTable.setShowGrid(true);
       covidTable.getTableHeader().setFont(new Font("SansSerif 14 Plain",Font.BOLD,16));
               for (int i = 0; i < newTable.getModel().getColumnCount(); i++) {
            newTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        newTable.setShowGrid(true);
       newTable.getTableHeader().setFont(new Font("SansSerif 14 Plain",Font.BOLD,16));
       jTabbedPane1.setBackground(Color.WHITE);
        

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
        public void populateAllRecords(){
               DefaultTableModel model = (DefaultTableModel)respTable.getModel();
        model.setRowCount(0);
        List<PharmaWorkRequest> requestList = business.getPharmaQueue().getPharmaList();
        for(PharmaWorkRequest req: requestList){
            if(req.getEnterprise().equals(enterprise.getName())){
                            String medList = "";
                Map<Medicine,Integer> medMap= req.getMedList();
                for (Map.Entry<Medicine,Integer> medicine : medMap.entrySet()) {  
                    if(medList.equals("")){
                        medList+=medicine.getKey();
                    }else{    
                        medList+=","+medicine.getKey();
                  }
                } 
                    Map<String,Date> map = req.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : req.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            Object row[] = new Object[9];
                         row[0] = req;
                         if(req.getSender() == null){
                             row[1] = "";
                         }else{
                 row[1] = req.getSender();  
                         }
                 row[2] = medList;
                 row[3] = req.getCreateDate();
                 row[4] = req.getCondition();
                 row[5] = latestKey;

            

            
            model.addRow(row);    
            }
        }
    }
       public void populateTimeline(PharmaWorkRequest req){
       DefaultTableModel model = (DefaultTableModel)timelineTable.getModel();
        model.setRowCount(0);
           Map<String,Date> map = req.getStatusMap();
           Map<String, Date> Sortedmap = sortByDate(map);
            for (Map.Entry<String,Date> mapEntry : Sortedmap.entrySet()) {
                            Object row[] = new Object[5];
                 row[0] =mapEntry.getValue(); 
                 row[1] = mapEntry.getKey();
                  model.addRow(row); 
               }
      }
              public void populateTimeline(String req){
       DefaultTableModel model = (DefaultTableModel)timelineTable.getModel();
        model.setRowCount(0);
              }
    public void populateCovidCases(){
        Map<String,Integer> covMed = new HashMap<String,Integer>();
        PharmacyEnterprise pharmaEnterprise = (PharmacyEnterprise) enterprise;
        for(Medicine med : pharmaEnterprise.getMedicineCatalog().getMedicineList()){
            int medCount =0;
            if(med.getCondition().equalsIgnoreCase("covid")){
                for(PharmaWorkRequest request: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = request.getMedList();
                    for (Map.Entry<Medicine,Integer> medicine : medMap.entrySet()) {
                         if(medicine.getKey().getName().equals(med.getName())){
                             medCount+=medicine.getValue();
                         }
                    } 
                }
                covMed.put(med.getName(), medCount);
            }
        }
        DefaultTableModel model = (DefaultTableModel)covidTable.getModel();
        model.setRowCount(0);
         for (Map.Entry<String,Integer> medEntry : covMed.entrySet()) {   
               Object row[] = new Object[8];
                 row[0] = medEntry.getKey();
                 row[1] = medEntry.getValue();
                   model.addRow(row); 
            }
    }   
     private  Map<String,Date> sortByDate(Map<String, Date> map){
        List<Map.Entry<String, Date>> tempList = new LinkedList<Map.Entry<String, Date>>(map.entrySet());
        Collections.sort(tempList, new Comparator<Map.Entry<String, Date>>(){
            public int compare(Map.Entry<String, Date> obj1,Map.Entry<String, Date> obj2) {
                    return obj1.getValue().compareTo(obj2.getValue());
            }
        });

        Map<String, Date> sortedMap = new LinkedHashMap<String, Date>();
        for (Map.Entry<String, Date> entry : tempList){
            sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
    }
    public Comparator<Medicine> dateComparator = (Medicine o1, Medicine o2) -> o2.getCreateDate().compareTo(o1.getCreateDate());
    public void populateNewMedList(){
        DefaultTableModel model = (DefaultTableModel)newTable.getModel();
        model.setRowCount(0);
        PharmacyEnterprise pharmaEnterprise = (PharmacyEnterprise) enterprise;
         Collections.sort(pharmaEnterprise.getMedicineCatalog().getMedicineList(),dateComparator);

          for(Medicine med : pharmaEnterprise.getMedicineCatalog().getMedicineList()){
                 Object row[] = new Object[8];
                 row[0] = med.getName();
                 row[1] = med.getCondition();
                 row[2] = med.getCreateDate();
                   model.addRow(row); 
          }      
    }   
    public void populateAgeGroup(){
        int count1to15 = 0;
        int count16to30=0;
        int count31to45=0;
        int count46to60=0;
        int count61to75=0;
        int count76to90=0;
        int count90toAbove=0;
        
        for(PharmaWorkRequest request : business.getPharmaQueue().getPharmaList()){
            int age = 0;
           for(Patient p: business.getPatientDirectory().getpatientlist()){
               if(p.getUserAccount().equals(request.getCust().getUsername())){
                   age = p.getAge();
               }
           }
            if(age > 0){
            if((age >= 1) &&(age <= 15)) {
                ++count1to15;
            }
            if((age >= 16) &&(age <= 30)) {
                ++count16to30;
            }
            if((age >= 31) &&(age <= 46)) {
                ++count31to45;
            }
            if((age >= 47) &&(age <= 60)) {
                ++count46to60;
            }
            if((age >= 61) &&(age <= 75)) {
                ++count61to75;
            }
            if((age >= 76) &&(age <= 90)) {
                ++count76to90;
            }else{
                ++count90toAbove;
            }
            }
        }
        

        DefaultPieDataset piedataset= new DefaultPieDataset();
        piedataset.setValue("1-15", count1to15);
        piedataset.setValue("16-30",count16to30 );
        piedataset.setValue("31-45",count31to45);
        piedataset.setValue("46-60",count46to60);
        piedataset.setValue("61-75",count61to75);
        piedataset.setValue("76-90",count76to90);
        piedataset.setValue("90-Above",count90toAbove);
        JFreeChart chart=ChartFactory.createPieChart("Pharmacy Age-Group Chart", piedataset, true, true, true);
        PiePlot p=(PiePlot)chart.getPlot();
       
        ChartFrame frame=new ChartFrame("Age-Group Pie Chart", chart);
       
       ageGroupPanel.setLayout(new java.awt.BorderLayout());
        ageGroupPanel.add(new ChartPanel(chart));
       ageGroupPanel.setPreferredSize(new Dimension(300,300));
}
    public void populateMedicineGraph(){
    DefaultCategoryDataset category = new DefaultCategoryDataset();
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(Medicine medicine: e.getMedicineCatalog().getMedicineList()){
        int count = 0;
        for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getName().equals(medicine.getName())){
                             count+=med.getValue();
                         }
                    } 
                }
                category.setValue(count, "MedicineRequests", medicine.getName());
        }

   
       JFreeChart chart=ChartFactory.createBarChart("Medicine Demand Chart", "Medicine", "MedicineRequests", category, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p= (CategoryPlot)chart.getPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame=new ChartFrame("Medicine Demand Chart", chart);
        
        demandPanel.setLayout(new java.awt.BorderLayout());
        demandPanel.add(new ChartPanel(chart));
        demandPanel.setPreferredSize(new Dimension(300,300));
    
}
   public void populateConditionMedDemands(){
    DefaultCategoryDataset category = new DefaultCategoryDataset();
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(Medicine medicine: e.getMedicineCatalog().getMedicineList()){
        int count = 0;
        for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getName().equals(medicine.getName())){
                             count+=med.getValue();
                         }
                    } 
                }
                category.addValue(count, medicine.getName(), medicine.getCondition());
        }
    
    
    


   
       JFreeChart chart=ChartFactory.createBarChart("Medicine Demand Chart", "Medicine", "MedicineRequests", category, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p= (CategoryPlot)chart.getPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame=new ChartFrame("Medicine Demand Chart", chart);
        
        medDemandPanel.setLayout(new java.awt.BorderLayout());
        medDemandPanel.add(new ChartPanel(chart));
        medDemandPanel.setPreferredSize(new Dimension(610,400));
    
}
    public void populateConditionDemand(){
               int diabetesCount = 0;
        int covidCount=0;
        int heartCount=0;
        int respCount=0;
        int feverCount=0;
        int entCount=0;
        int painCount=0;
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getCondition().equalsIgnoreCase("Covid")){
                             covidCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Heart")){
                             heartCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Resp")){
                             respCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Fever")){
                             feverCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Ent")){
                             entCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Pain")){
                             painCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Diabetes")){
                             diabetesCount+=med.getValue();
                         }
                    } 
    }

        DefaultPieDataset piedataset= new DefaultPieDataset();
        piedataset.setValue("Covid-Relief", covidCount);
        piedataset.setValue("Heart Problems",heartCount);
        piedataset.setValue("Diabetes",diabetesCount);
        piedataset.setValue("Respiratory Problems",respCount);
        piedataset.setValue("EnT Medicines",entCount);
        piedataset.setValue("Fever",feverCount);
        piedataset.setValue("PainKillers",painCount);        
        JFreeChart chart=ChartFactory.createPieChart("Medicine Type Chart", piedataset, true, true, true);
        PiePlot p=(PiePlot)chart.getPlot();
        ChartFrame frame=new ChartFrame("Medicine Type Chart", chart);
       conditionPanel.setLayout(new java.awt.BorderLayout());
        conditionPanel.add(new ChartPanel(chart));
        conditionPanel.setPreferredSize(new Dimension(300,300));
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        introPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblEnterprise = new javax.swing.JLabel();
        lblAccount = new javax.swing.JLabel();
        backJButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        covidTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        ageGroupPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        conditionPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        medDemandPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        demandPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        respTable = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        timelineTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        introPanel.setBackground(new java.awt.Color(0, 102, 102));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pharmacy Company Report");

        lblEnterprise.setBackground(new java.awt.Color(51, 51, 51));
        lblEnterprise.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblEnterprise.setForeground(new java.awt.Color(255, 255, 255));
        lblEnterprise.setText("Enterprise:");
        lblEnterprise.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lblAccount.setBackground(new java.awt.Color(51, 51, 51));
        lblAccount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblAccount.setForeground(new java.awt.Color(255, 255, 255));
        lblAccount.setText("Enterprise:");
        lblAccount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        backJButton1.setBackground(new java.awt.Color(0, 102, 102));
        backJButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backJButton1.setForeground(new java.awt.Color(255, 255, 255));
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/home2.png"))); // NOI18N
        backJButton1.setText("Home");
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout introPanelLayout = new javax.swing.GroupLayout(introPanel);
        introPanel.setLayout(introPanelLayout);
        introPanelLayout.setHorizontalGroup(
            introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(introPanelLayout.createSequentialGroup()
                .addGroup(introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(introPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(introPanelLayout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        introPanelLayout.setVerticalGroup(
            introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(introPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(introPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, introPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(backJButton1))
        );

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/vacreport.png"))); // NOI18N

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        newTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Medicine", "Condition", "CreateDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(newTable);
        if (newTable.getColumnModel().getColumnCount() > 0) {
            newTable.getColumnModel().getColumn(0).setResizable(false);
            newTable.getColumnModel().getColumn(1).setResizable(false);
            newTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1190, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Recently Added Medicines", jPanel1);

        covidTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Medicine", "Requests"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(covidTable);
        if (covidTable.getColumnModel().getColumnCount() > 0) {
            covidTable.getColumnModel().getColumn(0).setResizable(false);
            covidTable.getColumnModel().getColumn(1).setResizable(false);
            covidTable.getColumnModel().getColumn(1).setHeaderValue("Requests");
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1190, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Covid Medicine Analysis", jPanel2);

        ageGroupPanel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel14.setText("Age-Group");

        javax.swing.GroupLayout ageGroupPanelLayout = new javax.swing.GroupLayout(ageGroupPanel);
        ageGroupPanel.setLayout(ageGroupPanelLayout);
        ageGroupPanelLayout.setHorizontalGroup(
            ageGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ageGroupPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel14)
                .addContainerGap(999, Short.MAX_VALUE))
        );
        ageGroupPanelLayout.setVerticalGroup(
            ageGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ageGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(ageGroupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ageGroupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Age-Group Medicine Analysis", jPanel3);

        conditionPanel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel12.setText("Age-Group");

        javax.swing.GroupLayout conditionPanelLayout = new javax.swing.GroupLayout(conditionPanel);
        conditionPanel.setLayout(conditionPanelLayout);
        conditionPanelLayout.setHorizontalGroup(
            conditionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel12)
                .addContainerGap(1005, Short.MAX_VALUE))
        );
        conditionPanelLayout.setVerticalGroup(
            conditionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(conditionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(conditionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Medical Condition Analysis", jPanel5);

        medDemandPanel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel11.setText("Age-Group");

        javax.swing.GroupLayout medDemandPanelLayout = new javax.swing.GroupLayout(medDemandPanel);
        medDemandPanel.setLayout(medDemandPanelLayout);
        medDemandPanelLayout.setHorizontalGroup(
            medDemandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medDemandPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel11)
                .addContainerGap(1001, Short.MAX_VALUE))
        );
        medDemandPanelLayout.setVerticalGroup(
            medDemandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medDemandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(283, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(medDemandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(medDemandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Medical Condition Demands", jPanel4);

        demandPanel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel13.setText("Age-Group");

        javax.swing.GroupLayout demandPanelLayout = new javax.swing.GroupLayout(demandPanel);
        demandPanel.setLayout(demandPanelLayout);
        demandPanelLayout.setHorizontalGroup(
            demandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(demandPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel13)
                .addContainerGap(1005, Short.MAX_VALUE))
        );
        demandPanelLayout.setVerticalGroup(
            demandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(demandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(demandPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(demandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Medicine Demands", jPanel6);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        respTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "RequestID", "PatientName", "Medicine", "RequestDate", "CovidCondition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(respTable);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(285, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Medicine Request Logs", jPanel14);

        timelineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(timelineTable);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1144, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Timeline", jPanel15);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pharmacy Requests History", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(introPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(introPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
          if(this.jTabbedPane2.getSelectedIndex() == 0){//newly added medicines
           populateNewMedList();//newly approved
        }else if(this.jTabbedPane2.getSelectedIndex() ==  1){//covid medicines
           populateCovidCases(); //covid medicine number of requests - each req display
        }else if(this.jTabbedPane2.getSelectedIndex() ==  2){//age group analysis
                    populateAgeGroup();//age group pie chart
        }else if(this.jTabbedPane2.getSelectedIndex() ==  3){//condition analysis
                    populateConditionDemand(); //condition pie chart
        }else if(this.jTabbedPane2.getSelectedIndex() ==  4){//condition demands
                    populateConditionMedDemands(); //For each condtion medicine more of demand
        }else if(this.jTabbedPane2.getSelectedIndex() ==  5){//medicine demands
                    populateMedicineGraph();//medicine number of buyers
        }else if(this.jTabbedPane2.getSelectedIndex() ==  6){//pharmacy history
                populateAllRecords();
                populateTimeline("");
        }
         
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        // TODO add your handling code here:
        if(this.jTabbedPane2.getSelectedIndex() == 0){//view logs
            populateAllRecords();
            populateTimeline("");
        }else if(this.jTabbedPane2.getSelectedIndex() ==  1){//view timeline
            int selectedRow = respTable.getSelectedRow();
            if(selectedRow<0){
                JOptionPane.showMessageDialog(null, "Please select a Medicine Request row!", "Warning", JOptionPane.WARNING_MESSAGE);
                
                populateTimeline("");
                return;
            }

            PharmaWorkRequest pharma= (PharmaWorkRequest)respTable.getValueAt(selectedRow, 0);

            populateTimeline(pharma);
        }
    }//GEN-LAST:event_jTabbedPane2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ageGroupPanel;
    private javax.swing.JButton backJButton1;
    private javax.swing.JPanel conditionPanel;
    private javax.swing.JTable covidTable;
    private javax.swing.JPanel demandPanel;
    private javax.swing.JPanel introPanel;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblAccount;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JPanel medDemandPanel;
    private javax.swing.JTable newTable;
    private javax.swing.JTable respTable;
    private javax.swing.JTable timelineTable;
    // End of variables declaration//GEN-END:variables
}
